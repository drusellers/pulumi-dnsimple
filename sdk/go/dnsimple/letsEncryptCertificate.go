// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dnsimple

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-dnsimple/sdk/v4/go/dnsimple/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LetsEncryptCertificate struct {
	pulumi.CustomResourceState

	AlternateNames      pulumi.StringArrayOutput `pulumi:"alternateNames"`
	AuthorityIdentifier pulumi.StringOutput      `pulumi:"authorityIdentifier"`
	AutoRenew           pulumi.BoolOutput        `pulumi:"autoRenew"`
	CreatedAt           pulumi.StringOutput      `pulumi:"createdAt"`
	Csr                 pulumi.StringOutput      `pulumi:"csr"`
	DomainId            pulumi.StringOutput      `pulumi:"domainId"`
	ExpiresAt           pulumi.StringOutput      `pulumi:"expiresAt"`
	Name                pulumi.StringOutput      `pulumi:"name"`
	SignatureAlgorithm  pulumi.StringPtrOutput   `pulumi:"signatureAlgorithm"`
	State               pulumi.StringOutput      `pulumi:"state"`
	UpdatedAt           pulumi.StringOutput      `pulumi:"updatedAt"`
	Years               pulumi.IntOutput         `pulumi:"years"`
}

// NewLetsEncryptCertificate registers a new resource with the given unique name, arguments, and options.
func NewLetsEncryptCertificate(ctx *pulumi.Context,
	name string, args *LetsEncryptCertificateArgs, opts ...pulumi.ResourceOption) (*LetsEncryptCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutoRenew == nil {
		return nil, errors.New("invalid value for required argument 'AutoRenew'")
	}
	if args.DomainId == nil {
		return nil, errors.New("invalid value for required argument 'DomainId'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LetsEncryptCertificate
	err := ctx.RegisterResource("dnsimple:index/letsEncryptCertificate:LetsEncryptCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLetsEncryptCertificate gets an existing LetsEncryptCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLetsEncryptCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LetsEncryptCertificateState, opts ...pulumi.ResourceOption) (*LetsEncryptCertificate, error) {
	var resource LetsEncryptCertificate
	err := ctx.ReadResource("dnsimple:index/letsEncryptCertificate:LetsEncryptCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LetsEncryptCertificate resources.
type letsEncryptCertificateState struct {
	AlternateNames      []string `pulumi:"alternateNames"`
	AuthorityIdentifier *string  `pulumi:"authorityIdentifier"`
	AutoRenew           *bool    `pulumi:"autoRenew"`
	CreatedAt           *string  `pulumi:"createdAt"`
	Csr                 *string  `pulumi:"csr"`
	DomainId            *string  `pulumi:"domainId"`
	ExpiresAt           *string  `pulumi:"expiresAt"`
	Name                *string  `pulumi:"name"`
	SignatureAlgorithm  *string  `pulumi:"signatureAlgorithm"`
	State               *string  `pulumi:"state"`
	UpdatedAt           *string  `pulumi:"updatedAt"`
	Years               *int     `pulumi:"years"`
}

type LetsEncryptCertificateState struct {
	AlternateNames      pulumi.StringArrayInput
	AuthorityIdentifier pulumi.StringPtrInput
	AutoRenew           pulumi.BoolPtrInput
	CreatedAt           pulumi.StringPtrInput
	Csr                 pulumi.StringPtrInput
	DomainId            pulumi.StringPtrInput
	ExpiresAt           pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	SignatureAlgorithm  pulumi.StringPtrInput
	State               pulumi.StringPtrInput
	UpdatedAt           pulumi.StringPtrInput
	Years               pulumi.IntPtrInput
}

func (LetsEncryptCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*letsEncryptCertificateState)(nil)).Elem()
}

type letsEncryptCertificateArgs struct {
	AlternateNames     []string `pulumi:"alternateNames"`
	AutoRenew          bool     `pulumi:"autoRenew"`
	DomainId           string   `pulumi:"domainId"`
	Name               string   `pulumi:"name"`
	SignatureAlgorithm *string  `pulumi:"signatureAlgorithm"`
}

// The set of arguments for constructing a LetsEncryptCertificate resource.
type LetsEncryptCertificateArgs struct {
	AlternateNames     pulumi.StringArrayInput
	AutoRenew          pulumi.BoolInput
	DomainId           pulumi.StringInput
	Name               pulumi.StringInput
	SignatureAlgorithm pulumi.StringPtrInput
}

func (LetsEncryptCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*letsEncryptCertificateArgs)(nil)).Elem()
}

type LetsEncryptCertificateInput interface {
	pulumi.Input

	ToLetsEncryptCertificateOutput() LetsEncryptCertificateOutput
	ToLetsEncryptCertificateOutputWithContext(ctx context.Context) LetsEncryptCertificateOutput
}

func (*LetsEncryptCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**LetsEncryptCertificate)(nil)).Elem()
}

func (i *LetsEncryptCertificate) ToLetsEncryptCertificateOutput() LetsEncryptCertificateOutput {
	return i.ToLetsEncryptCertificateOutputWithContext(context.Background())
}

func (i *LetsEncryptCertificate) ToLetsEncryptCertificateOutputWithContext(ctx context.Context) LetsEncryptCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LetsEncryptCertificateOutput)
}

// LetsEncryptCertificateArrayInput is an input type that accepts LetsEncryptCertificateArray and LetsEncryptCertificateArrayOutput values.
// You can construct a concrete instance of `LetsEncryptCertificateArrayInput` via:
//
//	LetsEncryptCertificateArray{ LetsEncryptCertificateArgs{...} }
type LetsEncryptCertificateArrayInput interface {
	pulumi.Input

	ToLetsEncryptCertificateArrayOutput() LetsEncryptCertificateArrayOutput
	ToLetsEncryptCertificateArrayOutputWithContext(context.Context) LetsEncryptCertificateArrayOutput
}

type LetsEncryptCertificateArray []LetsEncryptCertificateInput

func (LetsEncryptCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LetsEncryptCertificate)(nil)).Elem()
}

func (i LetsEncryptCertificateArray) ToLetsEncryptCertificateArrayOutput() LetsEncryptCertificateArrayOutput {
	return i.ToLetsEncryptCertificateArrayOutputWithContext(context.Background())
}

func (i LetsEncryptCertificateArray) ToLetsEncryptCertificateArrayOutputWithContext(ctx context.Context) LetsEncryptCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LetsEncryptCertificateArrayOutput)
}

// LetsEncryptCertificateMapInput is an input type that accepts LetsEncryptCertificateMap and LetsEncryptCertificateMapOutput values.
// You can construct a concrete instance of `LetsEncryptCertificateMapInput` via:
//
//	LetsEncryptCertificateMap{ "key": LetsEncryptCertificateArgs{...} }
type LetsEncryptCertificateMapInput interface {
	pulumi.Input

	ToLetsEncryptCertificateMapOutput() LetsEncryptCertificateMapOutput
	ToLetsEncryptCertificateMapOutputWithContext(context.Context) LetsEncryptCertificateMapOutput
}

type LetsEncryptCertificateMap map[string]LetsEncryptCertificateInput

func (LetsEncryptCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LetsEncryptCertificate)(nil)).Elem()
}

func (i LetsEncryptCertificateMap) ToLetsEncryptCertificateMapOutput() LetsEncryptCertificateMapOutput {
	return i.ToLetsEncryptCertificateMapOutputWithContext(context.Background())
}

func (i LetsEncryptCertificateMap) ToLetsEncryptCertificateMapOutputWithContext(ctx context.Context) LetsEncryptCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LetsEncryptCertificateMapOutput)
}

type LetsEncryptCertificateOutput struct{ *pulumi.OutputState }

func (LetsEncryptCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LetsEncryptCertificate)(nil)).Elem()
}

func (o LetsEncryptCertificateOutput) ToLetsEncryptCertificateOutput() LetsEncryptCertificateOutput {
	return o
}

func (o LetsEncryptCertificateOutput) ToLetsEncryptCertificateOutputWithContext(ctx context.Context) LetsEncryptCertificateOutput {
	return o
}

func (o LetsEncryptCertificateOutput) AlternateNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LetsEncryptCertificate) pulumi.StringArrayOutput { return v.AlternateNames }).(pulumi.StringArrayOutput)
}

func (o LetsEncryptCertificateOutput) AuthorityIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *LetsEncryptCertificate) pulumi.StringOutput { return v.AuthorityIdentifier }).(pulumi.StringOutput)
}

func (o LetsEncryptCertificateOutput) AutoRenew() pulumi.BoolOutput {
	return o.ApplyT(func(v *LetsEncryptCertificate) pulumi.BoolOutput { return v.AutoRenew }).(pulumi.BoolOutput)
}

func (o LetsEncryptCertificateOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *LetsEncryptCertificate) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o LetsEncryptCertificateOutput) Csr() pulumi.StringOutput {
	return o.ApplyT(func(v *LetsEncryptCertificate) pulumi.StringOutput { return v.Csr }).(pulumi.StringOutput)
}

func (o LetsEncryptCertificateOutput) DomainId() pulumi.StringOutput {
	return o.ApplyT(func(v *LetsEncryptCertificate) pulumi.StringOutput { return v.DomainId }).(pulumi.StringOutput)
}

func (o LetsEncryptCertificateOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v *LetsEncryptCertificate) pulumi.StringOutput { return v.ExpiresAt }).(pulumi.StringOutput)
}

func (o LetsEncryptCertificateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LetsEncryptCertificate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o LetsEncryptCertificateOutput) SignatureAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LetsEncryptCertificate) pulumi.StringPtrOutput { return v.SignatureAlgorithm }).(pulumi.StringPtrOutput)
}

func (o LetsEncryptCertificateOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *LetsEncryptCertificate) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o LetsEncryptCertificateOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *LetsEncryptCertificate) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

func (o LetsEncryptCertificateOutput) Years() pulumi.IntOutput {
	return o.ApplyT(func(v *LetsEncryptCertificate) pulumi.IntOutput { return v.Years }).(pulumi.IntOutput)
}

type LetsEncryptCertificateArrayOutput struct{ *pulumi.OutputState }

func (LetsEncryptCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LetsEncryptCertificate)(nil)).Elem()
}

func (o LetsEncryptCertificateArrayOutput) ToLetsEncryptCertificateArrayOutput() LetsEncryptCertificateArrayOutput {
	return o
}

func (o LetsEncryptCertificateArrayOutput) ToLetsEncryptCertificateArrayOutputWithContext(ctx context.Context) LetsEncryptCertificateArrayOutput {
	return o
}

func (o LetsEncryptCertificateArrayOutput) Index(i pulumi.IntInput) LetsEncryptCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LetsEncryptCertificate {
		return vs[0].([]*LetsEncryptCertificate)[vs[1].(int)]
	}).(LetsEncryptCertificateOutput)
}

type LetsEncryptCertificateMapOutput struct{ *pulumi.OutputState }

func (LetsEncryptCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LetsEncryptCertificate)(nil)).Elem()
}

func (o LetsEncryptCertificateMapOutput) ToLetsEncryptCertificateMapOutput() LetsEncryptCertificateMapOutput {
	return o
}

func (o LetsEncryptCertificateMapOutput) ToLetsEncryptCertificateMapOutputWithContext(ctx context.Context) LetsEncryptCertificateMapOutput {
	return o
}

func (o LetsEncryptCertificateMapOutput) MapIndex(k pulumi.StringInput) LetsEncryptCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LetsEncryptCertificate {
		return vs[0].(map[string]*LetsEncryptCertificate)[vs[1].(string)]
	}).(LetsEncryptCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LetsEncryptCertificateInput)(nil)).Elem(), &LetsEncryptCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*LetsEncryptCertificateArrayInput)(nil)).Elem(), LetsEncryptCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LetsEncryptCertificateMapInput)(nil)).Elem(), LetsEncryptCertificateMap{})
	pulumi.RegisterOutputType(LetsEncryptCertificateOutput{})
	pulumi.RegisterOutputType(LetsEncryptCertificateArrayOutput{})
	pulumi.RegisterOutputType(LetsEncryptCertificateMapOutput{})
}
