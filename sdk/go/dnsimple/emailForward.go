// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dnsimple

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a DNSimple email forward resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-dnsimple/sdk/v3/go/dnsimple"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := dnsimple.NewEmailForward(ctx, "foobar", &dnsimple.EmailForwardArgs{
// 			AliasName:        pulumi.String("sales"),
// 			DestinationEmail: pulumi.String("jane.doe@example.com"),
// 			Domain:           pulumi.Any(_var.Dnsimple_domain),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type EmailForward struct {
	pulumi.CustomResourceState

	// The name part (the part before the @) of the source email address on the domain
	AliasName pulumi.StringOutput `pulumi:"aliasName"`
	// The destination email address on another domain
	DestinationEmail pulumi.StringOutput `pulumi:"destinationEmail"`
	// The domain to add the email forwarding rule to
	Domain pulumi.StringOutput `pulumi:"domain"`
}

// NewEmailForward registers a new resource with the given unique name, arguments, and options.
func NewEmailForward(ctx *pulumi.Context,
	name string, args *EmailForwardArgs, opts ...pulumi.ResourceOption) (*EmailForward, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AliasName == nil {
		return nil, errors.New("invalid value for required argument 'AliasName'")
	}
	if args.DestinationEmail == nil {
		return nil, errors.New("invalid value for required argument 'DestinationEmail'")
	}
	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	var resource EmailForward
	err := ctx.RegisterResource("dnsimple:index/emailForward:EmailForward", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEmailForward gets an existing EmailForward resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEmailForward(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EmailForwardState, opts ...pulumi.ResourceOption) (*EmailForward, error) {
	var resource EmailForward
	err := ctx.ReadResource("dnsimple:index/emailForward:EmailForward", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EmailForward resources.
type emailForwardState struct {
	// The name part (the part before the @) of the source email address on the domain
	AliasName *string `pulumi:"aliasName"`
	// The destination email address on another domain
	DestinationEmail *string `pulumi:"destinationEmail"`
	// The domain to add the email forwarding rule to
	Domain *string `pulumi:"domain"`
}

type EmailForwardState struct {
	// The name part (the part before the @) of the source email address on the domain
	AliasName pulumi.StringPtrInput
	// The destination email address on another domain
	DestinationEmail pulumi.StringPtrInput
	// The domain to add the email forwarding rule to
	Domain pulumi.StringPtrInput
}

func (EmailForwardState) ElementType() reflect.Type {
	return reflect.TypeOf((*emailForwardState)(nil)).Elem()
}

type emailForwardArgs struct {
	// The name part (the part before the @) of the source email address on the domain
	AliasName string `pulumi:"aliasName"`
	// The destination email address on another domain
	DestinationEmail string `pulumi:"destinationEmail"`
	// The domain to add the email forwarding rule to
	Domain string `pulumi:"domain"`
}

// The set of arguments for constructing a EmailForward resource.
type EmailForwardArgs struct {
	// The name part (the part before the @) of the source email address on the domain
	AliasName pulumi.StringInput
	// The destination email address on another domain
	DestinationEmail pulumi.StringInput
	// The domain to add the email forwarding rule to
	Domain pulumi.StringInput
}

func (EmailForwardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*emailForwardArgs)(nil)).Elem()
}

type EmailForwardInput interface {
	pulumi.Input

	ToEmailForwardOutput() EmailForwardOutput
	ToEmailForwardOutputWithContext(ctx context.Context) EmailForwardOutput
}

func (*EmailForward) ElementType() reflect.Type {
	return reflect.TypeOf((*EmailForward)(nil))
}

func (i *EmailForward) ToEmailForwardOutput() EmailForwardOutput {
	return i.ToEmailForwardOutputWithContext(context.Background())
}

func (i *EmailForward) ToEmailForwardOutputWithContext(ctx context.Context) EmailForwardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailForwardOutput)
}

func (i *EmailForward) ToEmailForwardPtrOutput() EmailForwardPtrOutput {
	return i.ToEmailForwardPtrOutputWithContext(context.Background())
}

func (i *EmailForward) ToEmailForwardPtrOutputWithContext(ctx context.Context) EmailForwardPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailForwardPtrOutput)
}

type EmailForwardPtrInput interface {
	pulumi.Input

	ToEmailForwardPtrOutput() EmailForwardPtrOutput
	ToEmailForwardPtrOutputWithContext(ctx context.Context) EmailForwardPtrOutput
}

type emailForwardPtrType EmailForwardArgs

func (*emailForwardPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailForward)(nil))
}

func (i *emailForwardPtrType) ToEmailForwardPtrOutput() EmailForwardPtrOutput {
	return i.ToEmailForwardPtrOutputWithContext(context.Background())
}

func (i *emailForwardPtrType) ToEmailForwardPtrOutputWithContext(ctx context.Context) EmailForwardPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailForwardPtrOutput)
}

// EmailForwardArrayInput is an input type that accepts EmailForwardArray and EmailForwardArrayOutput values.
// You can construct a concrete instance of `EmailForwardArrayInput` via:
//
//          EmailForwardArray{ EmailForwardArgs{...} }
type EmailForwardArrayInput interface {
	pulumi.Input

	ToEmailForwardArrayOutput() EmailForwardArrayOutput
	ToEmailForwardArrayOutputWithContext(context.Context) EmailForwardArrayOutput
}

type EmailForwardArray []EmailForwardInput

func (EmailForwardArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*EmailForward)(nil))
}

func (i EmailForwardArray) ToEmailForwardArrayOutput() EmailForwardArrayOutput {
	return i.ToEmailForwardArrayOutputWithContext(context.Background())
}

func (i EmailForwardArray) ToEmailForwardArrayOutputWithContext(ctx context.Context) EmailForwardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailForwardArrayOutput)
}

// EmailForwardMapInput is an input type that accepts EmailForwardMap and EmailForwardMapOutput values.
// You can construct a concrete instance of `EmailForwardMapInput` via:
//
//          EmailForwardMap{ "key": EmailForwardArgs{...} }
type EmailForwardMapInput interface {
	pulumi.Input

	ToEmailForwardMapOutput() EmailForwardMapOutput
	ToEmailForwardMapOutputWithContext(context.Context) EmailForwardMapOutput
}

type EmailForwardMap map[string]EmailForwardInput

func (EmailForwardMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*EmailForward)(nil))
}

func (i EmailForwardMap) ToEmailForwardMapOutput() EmailForwardMapOutput {
	return i.ToEmailForwardMapOutputWithContext(context.Background())
}

func (i EmailForwardMap) ToEmailForwardMapOutputWithContext(ctx context.Context) EmailForwardMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailForwardMapOutput)
}

type EmailForwardOutput struct {
	*pulumi.OutputState
}

func (EmailForwardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EmailForward)(nil))
}

func (o EmailForwardOutput) ToEmailForwardOutput() EmailForwardOutput {
	return o
}

func (o EmailForwardOutput) ToEmailForwardOutputWithContext(ctx context.Context) EmailForwardOutput {
	return o
}

func (o EmailForwardOutput) ToEmailForwardPtrOutput() EmailForwardPtrOutput {
	return o.ToEmailForwardPtrOutputWithContext(context.Background())
}

func (o EmailForwardOutput) ToEmailForwardPtrOutputWithContext(ctx context.Context) EmailForwardPtrOutput {
	return o.ApplyT(func(v EmailForward) *EmailForward {
		return &v
	}).(EmailForwardPtrOutput)
}

type EmailForwardPtrOutput struct {
	*pulumi.OutputState
}

func (EmailForwardPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailForward)(nil))
}

func (o EmailForwardPtrOutput) ToEmailForwardPtrOutput() EmailForwardPtrOutput {
	return o
}

func (o EmailForwardPtrOutput) ToEmailForwardPtrOutputWithContext(ctx context.Context) EmailForwardPtrOutput {
	return o
}

type EmailForwardArrayOutput struct{ *pulumi.OutputState }

func (EmailForwardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EmailForward)(nil))
}

func (o EmailForwardArrayOutput) ToEmailForwardArrayOutput() EmailForwardArrayOutput {
	return o
}

func (o EmailForwardArrayOutput) ToEmailForwardArrayOutputWithContext(ctx context.Context) EmailForwardArrayOutput {
	return o
}

func (o EmailForwardArrayOutput) Index(i pulumi.IntInput) EmailForwardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EmailForward {
		return vs[0].([]EmailForward)[vs[1].(int)]
	}).(EmailForwardOutput)
}

type EmailForwardMapOutput struct{ *pulumi.OutputState }

func (EmailForwardMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]EmailForward)(nil))
}

func (o EmailForwardMapOutput) ToEmailForwardMapOutput() EmailForwardMapOutput {
	return o
}

func (o EmailForwardMapOutput) ToEmailForwardMapOutputWithContext(ctx context.Context) EmailForwardMapOutput {
	return o
}

func (o EmailForwardMapOutput) MapIndex(k pulumi.StringInput) EmailForwardOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) EmailForward {
		return vs[0].(map[string]EmailForward)[vs[1].(string)]
	}).(EmailForwardOutput)
}

func init() {
	pulumi.RegisterOutputType(EmailForwardOutput{})
	pulumi.RegisterOutputType(EmailForwardPtrOutput{})
	pulumi.RegisterOutputType(EmailForwardArrayOutput{})
	pulumi.RegisterOutputType(EmailForwardMapOutput{})
}
