// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dnsimple

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-dnsimple/sdk/v4/go/dnsimple/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RegisteredDomain struct {
	pulumi.CustomResourceState

	AccountId        pulumi.IntOutput  `pulumi:"accountId"`
	AutoRenewEnabled pulumi.BoolOutput `pulumi:"autoRenewEnabled"`
	ContactId        pulumi.IntOutput  `pulumi:"contactId"`
	DnssecEnabled    pulumi.BoolOutput `pulumi:"dnssecEnabled"`
	// The domain registration details.
	DomainRegistration RegisteredDomainDomainRegistrationOutput `pulumi:"domainRegistration"`
	ExpiresAt          pulumi.StringOutput                      `pulumi:"expiresAt"`
	ExtendedAttributes pulumi.StringMapOutput                   `pulumi:"extendedAttributes"`
	Name               pulumi.StringOutput                      `pulumi:"name"`
	PremiumPrice       pulumi.StringPtrOutput                   `pulumi:"premiumPrice"`
	// The registrant change details.
	RegistrantChange RegisteredDomainRegistrantChangeOutput `pulumi:"registrantChange"`
	State            pulumi.StringOutput                    `pulumi:"state"`
	// Timeouts for operations, given as a parsable string as in `10m` or `30s`.
	Timeouts            RegisteredDomainTimeoutsPtrOutput `pulumi:"timeouts"`
	TransferLockEnabled pulumi.BoolOutput                 `pulumi:"transferLockEnabled"`
	UnicodeName         pulumi.StringOutput               `pulumi:"unicodeName"`
	WhoisPrivacyEnabled pulumi.BoolOutput                 `pulumi:"whoisPrivacyEnabled"`
}

// NewRegisteredDomain registers a new resource with the given unique name, arguments, and options.
func NewRegisteredDomain(ctx *pulumi.Context,
	name string, args *RegisteredDomainArgs, opts ...pulumi.ResourceOption) (*RegisteredDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContactId == nil {
		return nil, errors.New("invalid value for required argument 'ContactId'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegisteredDomain
	err := ctx.RegisterResource("dnsimple:index/registeredDomain:RegisteredDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegisteredDomain gets an existing RegisteredDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegisteredDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegisteredDomainState, opts ...pulumi.ResourceOption) (*RegisteredDomain, error) {
	var resource RegisteredDomain
	err := ctx.ReadResource("dnsimple:index/registeredDomain:RegisteredDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegisteredDomain resources.
type registeredDomainState struct {
	AccountId        *int  `pulumi:"accountId"`
	AutoRenewEnabled *bool `pulumi:"autoRenewEnabled"`
	ContactId        *int  `pulumi:"contactId"`
	DnssecEnabled    *bool `pulumi:"dnssecEnabled"`
	// The domain registration details.
	DomainRegistration *RegisteredDomainDomainRegistration `pulumi:"domainRegistration"`
	ExpiresAt          *string                             `pulumi:"expiresAt"`
	ExtendedAttributes map[string]string                   `pulumi:"extendedAttributes"`
	Name               *string                             `pulumi:"name"`
	PremiumPrice       *string                             `pulumi:"premiumPrice"`
	// The registrant change details.
	RegistrantChange *RegisteredDomainRegistrantChange `pulumi:"registrantChange"`
	State            *string                           `pulumi:"state"`
	// Timeouts for operations, given as a parsable string as in `10m` or `30s`.
	Timeouts            *RegisteredDomainTimeouts `pulumi:"timeouts"`
	TransferLockEnabled *bool                     `pulumi:"transferLockEnabled"`
	UnicodeName         *string                   `pulumi:"unicodeName"`
	WhoisPrivacyEnabled *bool                     `pulumi:"whoisPrivacyEnabled"`
}

type RegisteredDomainState struct {
	AccountId        pulumi.IntPtrInput
	AutoRenewEnabled pulumi.BoolPtrInput
	ContactId        pulumi.IntPtrInput
	DnssecEnabled    pulumi.BoolPtrInput
	// The domain registration details.
	DomainRegistration RegisteredDomainDomainRegistrationPtrInput
	ExpiresAt          pulumi.StringPtrInput
	ExtendedAttributes pulumi.StringMapInput
	Name               pulumi.StringPtrInput
	PremiumPrice       pulumi.StringPtrInput
	// The registrant change details.
	RegistrantChange RegisteredDomainRegistrantChangePtrInput
	State            pulumi.StringPtrInput
	// Timeouts for operations, given as a parsable string as in `10m` or `30s`.
	Timeouts            RegisteredDomainTimeoutsPtrInput
	TransferLockEnabled pulumi.BoolPtrInput
	UnicodeName         pulumi.StringPtrInput
	WhoisPrivacyEnabled pulumi.BoolPtrInput
}

func (RegisteredDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*registeredDomainState)(nil)).Elem()
}

type registeredDomainArgs struct {
	AutoRenewEnabled   *bool             `pulumi:"autoRenewEnabled"`
	ContactId          int               `pulumi:"contactId"`
	DnssecEnabled      *bool             `pulumi:"dnssecEnabled"`
	ExtendedAttributes map[string]string `pulumi:"extendedAttributes"`
	Name               string            `pulumi:"name"`
	PremiumPrice       *string           `pulumi:"premiumPrice"`
	// Timeouts for operations, given as a parsable string as in `10m` or `30s`.
	Timeouts            *RegisteredDomainTimeouts `pulumi:"timeouts"`
	TransferLockEnabled *bool                     `pulumi:"transferLockEnabled"`
	WhoisPrivacyEnabled *bool                     `pulumi:"whoisPrivacyEnabled"`
}

// The set of arguments for constructing a RegisteredDomain resource.
type RegisteredDomainArgs struct {
	AutoRenewEnabled   pulumi.BoolPtrInput
	ContactId          pulumi.IntInput
	DnssecEnabled      pulumi.BoolPtrInput
	ExtendedAttributes pulumi.StringMapInput
	Name               pulumi.StringInput
	PremiumPrice       pulumi.StringPtrInput
	// Timeouts for operations, given as a parsable string as in `10m` or `30s`.
	Timeouts            RegisteredDomainTimeoutsPtrInput
	TransferLockEnabled pulumi.BoolPtrInput
	WhoisPrivacyEnabled pulumi.BoolPtrInput
}

func (RegisteredDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*registeredDomainArgs)(nil)).Elem()
}

type RegisteredDomainInput interface {
	pulumi.Input

	ToRegisteredDomainOutput() RegisteredDomainOutput
	ToRegisteredDomainOutputWithContext(ctx context.Context) RegisteredDomainOutput
}

func (*RegisteredDomain) ElementType() reflect.Type {
	return reflect.TypeOf((**RegisteredDomain)(nil)).Elem()
}

func (i *RegisteredDomain) ToRegisteredDomainOutput() RegisteredDomainOutput {
	return i.ToRegisteredDomainOutputWithContext(context.Background())
}

func (i *RegisteredDomain) ToRegisteredDomainOutputWithContext(ctx context.Context) RegisteredDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegisteredDomainOutput)
}

// RegisteredDomainArrayInput is an input type that accepts RegisteredDomainArray and RegisteredDomainArrayOutput values.
// You can construct a concrete instance of `RegisteredDomainArrayInput` via:
//
//	RegisteredDomainArray{ RegisteredDomainArgs{...} }
type RegisteredDomainArrayInput interface {
	pulumi.Input

	ToRegisteredDomainArrayOutput() RegisteredDomainArrayOutput
	ToRegisteredDomainArrayOutputWithContext(context.Context) RegisteredDomainArrayOutput
}

type RegisteredDomainArray []RegisteredDomainInput

func (RegisteredDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegisteredDomain)(nil)).Elem()
}

func (i RegisteredDomainArray) ToRegisteredDomainArrayOutput() RegisteredDomainArrayOutput {
	return i.ToRegisteredDomainArrayOutputWithContext(context.Background())
}

func (i RegisteredDomainArray) ToRegisteredDomainArrayOutputWithContext(ctx context.Context) RegisteredDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegisteredDomainArrayOutput)
}

// RegisteredDomainMapInput is an input type that accepts RegisteredDomainMap and RegisteredDomainMapOutput values.
// You can construct a concrete instance of `RegisteredDomainMapInput` via:
//
//	RegisteredDomainMap{ "key": RegisteredDomainArgs{...} }
type RegisteredDomainMapInput interface {
	pulumi.Input

	ToRegisteredDomainMapOutput() RegisteredDomainMapOutput
	ToRegisteredDomainMapOutputWithContext(context.Context) RegisteredDomainMapOutput
}

type RegisteredDomainMap map[string]RegisteredDomainInput

func (RegisteredDomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegisteredDomain)(nil)).Elem()
}

func (i RegisteredDomainMap) ToRegisteredDomainMapOutput() RegisteredDomainMapOutput {
	return i.ToRegisteredDomainMapOutputWithContext(context.Background())
}

func (i RegisteredDomainMap) ToRegisteredDomainMapOutputWithContext(ctx context.Context) RegisteredDomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegisteredDomainMapOutput)
}

type RegisteredDomainOutput struct{ *pulumi.OutputState }

func (RegisteredDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegisteredDomain)(nil)).Elem()
}

func (o RegisteredDomainOutput) ToRegisteredDomainOutput() RegisteredDomainOutput {
	return o
}

func (o RegisteredDomainOutput) ToRegisteredDomainOutputWithContext(ctx context.Context) RegisteredDomainOutput {
	return o
}

func (o RegisteredDomainOutput) AccountId() pulumi.IntOutput {
	return o.ApplyT(func(v *RegisteredDomain) pulumi.IntOutput { return v.AccountId }).(pulumi.IntOutput)
}

func (o RegisteredDomainOutput) AutoRenewEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *RegisteredDomain) pulumi.BoolOutput { return v.AutoRenewEnabled }).(pulumi.BoolOutput)
}

func (o RegisteredDomainOutput) ContactId() pulumi.IntOutput {
	return o.ApplyT(func(v *RegisteredDomain) pulumi.IntOutput { return v.ContactId }).(pulumi.IntOutput)
}

func (o RegisteredDomainOutput) DnssecEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *RegisteredDomain) pulumi.BoolOutput { return v.DnssecEnabled }).(pulumi.BoolOutput)
}

// The domain registration details.
func (o RegisteredDomainOutput) DomainRegistration() RegisteredDomainDomainRegistrationOutput {
	return o.ApplyT(func(v *RegisteredDomain) RegisteredDomainDomainRegistrationOutput { return v.DomainRegistration }).(RegisteredDomainDomainRegistrationOutput)
}

func (o RegisteredDomainOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v *RegisteredDomain) pulumi.StringOutput { return v.ExpiresAt }).(pulumi.StringOutput)
}

func (o RegisteredDomainOutput) ExtendedAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RegisteredDomain) pulumi.StringMapOutput { return v.ExtendedAttributes }).(pulumi.StringMapOutput)
}

func (o RegisteredDomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RegisteredDomain) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RegisteredDomainOutput) PremiumPrice() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegisteredDomain) pulumi.StringPtrOutput { return v.PremiumPrice }).(pulumi.StringPtrOutput)
}

// The registrant change details.
func (o RegisteredDomainOutput) RegistrantChange() RegisteredDomainRegistrantChangeOutput {
	return o.ApplyT(func(v *RegisteredDomain) RegisteredDomainRegistrantChangeOutput { return v.RegistrantChange }).(RegisteredDomainRegistrantChangeOutput)
}

func (o RegisteredDomainOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *RegisteredDomain) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Timeouts for operations, given as a parsable string as in `10m` or `30s`.
func (o RegisteredDomainOutput) Timeouts() RegisteredDomainTimeoutsPtrOutput {
	return o.ApplyT(func(v *RegisteredDomain) RegisteredDomainTimeoutsPtrOutput { return v.Timeouts }).(RegisteredDomainTimeoutsPtrOutput)
}

func (o RegisteredDomainOutput) TransferLockEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *RegisteredDomain) pulumi.BoolOutput { return v.TransferLockEnabled }).(pulumi.BoolOutput)
}

func (o RegisteredDomainOutput) UnicodeName() pulumi.StringOutput {
	return o.ApplyT(func(v *RegisteredDomain) pulumi.StringOutput { return v.UnicodeName }).(pulumi.StringOutput)
}

func (o RegisteredDomainOutput) WhoisPrivacyEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *RegisteredDomain) pulumi.BoolOutput { return v.WhoisPrivacyEnabled }).(pulumi.BoolOutput)
}

type RegisteredDomainArrayOutput struct{ *pulumi.OutputState }

func (RegisteredDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegisteredDomain)(nil)).Elem()
}

func (o RegisteredDomainArrayOutput) ToRegisteredDomainArrayOutput() RegisteredDomainArrayOutput {
	return o
}

func (o RegisteredDomainArrayOutput) ToRegisteredDomainArrayOutputWithContext(ctx context.Context) RegisteredDomainArrayOutput {
	return o
}

func (o RegisteredDomainArrayOutput) Index(i pulumi.IntInput) RegisteredDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegisteredDomain {
		return vs[0].([]*RegisteredDomain)[vs[1].(int)]
	}).(RegisteredDomainOutput)
}

type RegisteredDomainMapOutput struct{ *pulumi.OutputState }

func (RegisteredDomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegisteredDomain)(nil)).Elem()
}

func (o RegisteredDomainMapOutput) ToRegisteredDomainMapOutput() RegisteredDomainMapOutput {
	return o
}

func (o RegisteredDomainMapOutput) ToRegisteredDomainMapOutputWithContext(ctx context.Context) RegisteredDomainMapOutput {
	return o
}

func (o RegisteredDomainMapOutput) MapIndex(k pulumi.StringInput) RegisteredDomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegisteredDomain {
		return vs[0].(map[string]*RegisteredDomain)[vs[1].(string)]
	}).(RegisteredDomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegisteredDomainInput)(nil)).Elem(), &RegisteredDomain{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegisteredDomainArrayInput)(nil)).Elem(), RegisteredDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegisteredDomainMapInput)(nil)).Elem(), RegisteredDomainMap{})
	pulumi.RegisterOutputType(RegisteredDomainOutput{})
	pulumi.RegisterOutputType(RegisteredDomainArrayOutput{})
	pulumi.RegisterOutputType(RegisteredDomainMapOutput{})
}
