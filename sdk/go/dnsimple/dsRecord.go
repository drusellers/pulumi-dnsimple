// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dnsimple

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-dnsimple/sdk/v4/go/dnsimple/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DsRecord struct {
	pulumi.CustomResourceState

	Algorithm  pulumi.StringOutput    `pulumi:"algorithm"`
	CreatedAt  pulumi.StringOutput    `pulumi:"createdAt"`
	Digest     pulumi.StringPtrOutput `pulumi:"digest"`
	DigestType pulumi.StringPtrOutput `pulumi:"digestType"`
	Domain     pulumi.StringOutput    `pulumi:"domain"`
	Keytag     pulumi.StringPtrOutput `pulumi:"keytag"`
	PublicKey  pulumi.StringPtrOutput `pulumi:"publicKey"`
	UpdatedAt  pulumi.StringOutput    `pulumi:"updatedAt"`
}

// NewDsRecord registers a new resource with the given unique name, arguments, and options.
func NewDsRecord(ctx *pulumi.Context,
	name string, args *DsRecordArgs, opts ...pulumi.ResourceOption) (*DsRecord, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Algorithm == nil {
		return nil, errors.New("invalid value for required argument 'Algorithm'")
	}
	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DsRecord
	err := ctx.RegisterResource("dnsimple:index/dsRecord:DsRecord", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDsRecord gets an existing DsRecord resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDsRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DsRecordState, opts ...pulumi.ResourceOption) (*DsRecord, error) {
	var resource DsRecord
	err := ctx.ReadResource("dnsimple:index/dsRecord:DsRecord", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DsRecord resources.
type dsRecordState struct {
	Algorithm  *string `pulumi:"algorithm"`
	CreatedAt  *string `pulumi:"createdAt"`
	Digest     *string `pulumi:"digest"`
	DigestType *string `pulumi:"digestType"`
	Domain     *string `pulumi:"domain"`
	Keytag     *string `pulumi:"keytag"`
	PublicKey  *string `pulumi:"publicKey"`
	UpdatedAt  *string `pulumi:"updatedAt"`
}

type DsRecordState struct {
	Algorithm  pulumi.StringPtrInput
	CreatedAt  pulumi.StringPtrInput
	Digest     pulumi.StringPtrInput
	DigestType pulumi.StringPtrInput
	Domain     pulumi.StringPtrInput
	Keytag     pulumi.StringPtrInput
	PublicKey  pulumi.StringPtrInput
	UpdatedAt  pulumi.StringPtrInput
}

func (DsRecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*dsRecordState)(nil)).Elem()
}

type dsRecordArgs struct {
	Algorithm  string  `pulumi:"algorithm"`
	Digest     *string `pulumi:"digest"`
	DigestType *string `pulumi:"digestType"`
	Domain     string  `pulumi:"domain"`
	Keytag     *string `pulumi:"keytag"`
	PublicKey  *string `pulumi:"publicKey"`
}

// The set of arguments for constructing a DsRecord resource.
type DsRecordArgs struct {
	Algorithm  pulumi.StringInput
	Digest     pulumi.StringPtrInput
	DigestType pulumi.StringPtrInput
	Domain     pulumi.StringInput
	Keytag     pulumi.StringPtrInput
	PublicKey  pulumi.StringPtrInput
}

func (DsRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dsRecordArgs)(nil)).Elem()
}

type DsRecordInput interface {
	pulumi.Input

	ToDsRecordOutput() DsRecordOutput
	ToDsRecordOutputWithContext(ctx context.Context) DsRecordOutput
}

func (*DsRecord) ElementType() reflect.Type {
	return reflect.TypeOf((**DsRecord)(nil)).Elem()
}

func (i *DsRecord) ToDsRecordOutput() DsRecordOutput {
	return i.ToDsRecordOutputWithContext(context.Background())
}

func (i *DsRecord) ToDsRecordOutputWithContext(ctx context.Context) DsRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DsRecordOutput)
}

// DsRecordArrayInput is an input type that accepts DsRecordArray and DsRecordArrayOutput values.
// You can construct a concrete instance of `DsRecordArrayInput` via:
//
//	DsRecordArray{ DsRecordArgs{...} }
type DsRecordArrayInput interface {
	pulumi.Input

	ToDsRecordArrayOutput() DsRecordArrayOutput
	ToDsRecordArrayOutputWithContext(context.Context) DsRecordArrayOutput
}

type DsRecordArray []DsRecordInput

func (DsRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DsRecord)(nil)).Elem()
}

func (i DsRecordArray) ToDsRecordArrayOutput() DsRecordArrayOutput {
	return i.ToDsRecordArrayOutputWithContext(context.Background())
}

func (i DsRecordArray) ToDsRecordArrayOutputWithContext(ctx context.Context) DsRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DsRecordArrayOutput)
}

// DsRecordMapInput is an input type that accepts DsRecordMap and DsRecordMapOutput values.
// You can construct a concrete instance of `DsRecordMapInput` via:
//
//	DsRecordMap{ "key": DsRecordArgs{...} }
type DsRecordMapInput interface {
	pulumi.Input

	ToDsRecordMapOutput() DsRecordMapOutput
	ToDsRecordMapOutputWithContext(context.Context) DsRecordMapOutput
}

type DsRecordMap map[string]DsRecordInput

func (DsRecordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DsRecord)(nil)).Elem()
}

func (i DsRecordMap) ToDsRecordMapOutput() DsRecordMapOutput {
	return i.ToDsRecordMapOutputWithContext(context.Background())
}

func (i DsRecordMap) ToDsRecordMapOutputWithContext(ctx context.Context) DsRecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DsRecordMapOutput)
}

type DsRecordOutput struct{ *pulumi.OutputState }

func (DsRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DsRecord)(nil)).Elem()
}

func (o DsRecordOutput) ToDsRecordOutput() DsRecordOutput {
	return o
}

func (o DsRecordOutput) ToDsRecordOutputWithContext(ctx context.Context) DsRecordOutput {
	return o
}

func (o DsRecordOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *DsRecord) pulumi.StringOutput { return v.Algorithm }).(pulumi.StringOutput)
}

func (o DsRecordOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DsRecord) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o DsRecordOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DsRecord) pulumi.StringPtrOutput { return v.Digest }).(pulumi.StringPtrOutput)
}

func (o DsRecordOutput) DigestType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DsRecord) pulumi.StringPtrOutput { return v.DigestType }).(pulumi.StringPtrOutput)
}

func (o DsRecordOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *DsRecord) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

func (o DsRecordOutput) Keytag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DsRecord) pulumi.StringPtrOutput { return v.Keytag }).(pulumi.StringPtrOutput)
}

func (o DsRecordOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DsRecord) pulumi.StringPtrOutput { return v.PublicKey }).(pulumi.StringPtrOutput)
}

func (o DsRecordOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DsRecord) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type DsRecordArrayOutput struct{ *pulumi.OutputState }

func (DsRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DsRecord)(nil)).Elem()
}

func (o DsRecordArrayOutput) ToDsRecordArrayOutput() DsRecordArrayOutput {
	return o
}

func (o DsRecordArrayOutput) ToDsRecordArrayOutputWithContext(ctx context.Context) DsRecordArrayOutput {
	return o
}

func (o DsRecordArrayOutput) Index(i pulumi.IntInput) DsRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DsRecord {
		return vs[0].([]*DsRecord)[vs[1].(int)]
	}).(DsRecordOutput)
}

type DsRecordMapOutput struct{ *pulumi.OutputState }

func (DsRecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DsRecord)(nil)).Elem()
}

func (o DsRecordMapOutput) ToDsRecordMapOutput() DsRecordMapOutput {
	return o
}

func (o DsRecordMapOutput) ToDsRecordMapOutputWithContext(ctx context.Context) DsRecordMapOutput {
	return o
}

func (o DsRecordMapOutput) MapIndex(k pulumi.StringInput) DsRecordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DsRecord {
		return vs[0].(map[string]*DsRecord)[vs[1].(string)]
	}).(DsRecordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DsRecordInput)(nil)).Elem(), &DsRecord{})
	pulumi.RegisterInputType(reflect.TypeOf((*DsRecordArrayInput)(nil)).Elem(), DsRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DsRecordMapInput)(nil)).Elem(), DsRecordMap{})
	pulumi.RegisterOutputType(DsRecordOutput{})
	pulumi.RegisterOutputType(DsRecordArrayOutput{})
	pulumi.RegisterOutputType(DsRecordMapOutput{})
}
