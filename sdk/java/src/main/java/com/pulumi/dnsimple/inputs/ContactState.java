// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dnsimple.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContactState extends com.pulumi.resources.ResourceArgs {

    public static final ContactState Empty = new ContactState();

    @Import(name="accountId")
    private @Nullable Output<Integer> accountId;

    public Optional<Output<Integer>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    @Import(name="address1")
    private @Nullable Output<String> address1;

    public Optional<Output<String>> address1() {
        return Optional.ofNullable(this.address1);
    }

    @Import(name="address2")
    private @Nullable Output<String> address2;

    public Optional<Output<String>> address2() {
        return Optional.ofNullable(this.address2);
    }

    @Import(name="city")
    private @Nullable Output<String> city;

    public Optional<Output<String>> city() {
        return Optional.ofNullable(this.city);
    }

    @Import(name="country")
    private @Nullable Output<String> country;

    public Optional<Output<String>> country() {
        return Optional.ofNullable(this.country);
    }

    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    @Import(name="email")
    private @Nullable Output<String> email;

    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    @Import(name="fax")
    private @Nullable Output<String> fax;

    public Optional<Output<String>> fax() {
        return Optional.ofNullable(this.fax);
    }

    @Import(name="faxNormalized")
    private @Nullable Output<String> faxNormalized;

    public Optional<Output<String>> faxNormalized() {
        return Optional.ofNullable(this.faxNormalized);
    }

    @Import(name="firstName")
    private @Nullable Output<String> firstName;

    public Optional<Output<String>> firstName() {
        return Optional.ofNullable(this.firstName);
    }

    @Import(name="jobTitle")
    private @Nullable Output<String> jobTitle;

    public Optional<Output<String>> jobTitle() {
        return Optional.ofNullable(this.jobTitle);
    }

    @Import(name="label")
    private @Nullable Output<String> label;

    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    @Import(name="lastName")
    private @Nullable Output<String> lastName;

    public Optional<Output<String>> lastName() {
        return Optional.ofNullable(this.lastName);
    }

    @Import(name="organizationName")
    private @Nullable Output<String> organizationName;

    public Optional<Output<String>> organizationName() {
        return Optional.ofNullable(this.organizationName);
    }

    @Import(name="phone")
    private @Nullable Output<String> phone;

    public Optional<Output<String>> phone() {
        return Optional.ofNullable(this.phone);
    }

    @Import(name="phoneNormalized")
    private @Nullable Output<String> phoneNormalized;

    public Optional<Output<String>> phoneNormalized() {
        return Optional.ofNullable(this.phoneNormalized);
    }

    @Import(name="postalCode")
    private @Nullable Output<String> postalCode;

    public Optional<Output<String>> postalCode() {
        return Optional.ofNullable(this.postalCode);
    }

    @Import(name="stateProvince")
    private @Nullable Output<String> stateProvince;

    public Optional<Output<String>> stateProvince() {
        return Optional.ofNullable(this.stateProvince);
    }

    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    private ContactState() {}

    private ContactState(ContactState $) {
        this.accountId = $.accountId;
        this.address1 = $.address1;
        this.address2 = $.address2;
        this.city = $.city;
        this.country = $.country;
        this.createdAt = $.createdAt;
        this.email = $.email;
        this.fax = $.fax;
        this.faxNormalized = $.faxNormalized;
        this.firstName = $.firstName;
        this.jobTitle = $.jobTitle;
        this.label = $.label;
        this.lastName = $.lastName;
        this.organizationName = $.organizationName;
        this.phone = $.phone;
        this.phoneNormalized = $.phoneNormalized;
        this.postalCode = $.postalCode;
        this.stateProvince = $.stateProvince;
        this.updatedAt = $.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContactState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContactState $;

        public Builder() {
            $ = new ContactState();
        }

        public Builder(ContactState defaults) {
            $ = new ContactState(Objects.requireNonNull(defaults));
        }

        public Builder accountId(@Nullable Output<Integer> accountId) {
            $.accountId = accountId;
            return this;
        }

        public Builder accountId(Integer accountId) {
            return accountId(Output.of(accountId));
        }

        public Builder address1(@Nullable Output<String> address1) {
            $.address1 = address1;
            return this;
        }

        public Builder address1(String address1) {
            return address1(Output.of(address1));
        }

        public Builder address2(@Nullable Output<String> address2) {
            $.address2 = address2;
            return this;
        }

        public Builder address2(String address2) {
            return address2(Output.of(address2));
        }

        public Builder city(@Nullable Output<String> city) {
            $.city = city;
            return this;
        }

        public Builder city(String city) {
            return city(Output.of(city));
        }

        public Builder country(@Nullable Output<String> country) {
            $.country = country;
            return this;
        }

        public Builder country(String country) {
            return country(Output.of(country));
        }

        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        public Builder email(String email) {
            return email(Output.of(email));
        }

        public Builder fax(@Nullable Output<String> fax) {
            $.fax = fax;
            return this;
        }

        public Builder fax(String fax) {
            return fax(Output.of(fax));
        }

        public Builder faxNormalized(@Nullable Output<String> faxNormalized) {
            $.faxNormalized = faxNormalized;
            return this;
        }

        public Builder faxNormalized(String faxNormalized) {
            return faxNormalized(Output.of(faxNormalized));
        }

        public Builder firstName(@Nullable Output<String> firstName) {
            $.firstName = firstName;
            return this;
        }

        public Builder firstName(String firstName) {
            return firstName(Output.of(firstName));
        }

        public Builder jobTitle(@Nullable Output<String> jobTitle) {
            $.jobTitle = jobTitle;
            return this;
        }

        public Builder jobTitle(String jobTitle) {
            return jobTitle(Output.of(jobTitle));
        }

        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        public Builder label(String label) {
            return label(Output.of(label));
        }

        public Builder lastName(@Nullable Output<String> lastName) {
            $.lastName = lastName;
            return this;
        }

        public Builder lastName(String lastName) {
            return lastName(Output.of(lastName));
        }

        public Builder organizationName(@Nullable Output<String> organizationName) {
            $.organizationName = organizationName;
            return this;
        }

        public Builder organizationName(String organizationName) {
            return organizationName(Output.of(organizationName));
        }

        public Builder phone(@Nullable Output<String> phone) {
            $.phone = phone;
            return this;
        }

        public Builder phone(String phone) {
            return phone(Output.of(phone));
        }

        public Builder phoneNormalized(@Nullable Output<String> phoneNormalized) {
            $.phoneNormalized = phoneNormalized;
            return this;
        }

        public Builder phoneNormalized(String phoneNormalized) {
            return phoneNormalized(Output.of(phoneNormalized));
        }

        public Builder postalCode(@Nullable Output<String> postalCode) {
            $.postalCode = postalCode;
            return this;
        }

        public Builder postalCode(String postalCode) {
            return postalCode(Output.of(postalCode));
        }

        public Builder stateProvince(@Nullable Output<String> stateProvince) {
            $.stateProvince = stateProvince;
            return this;
        }

        public Builder stateProvince(String stateProvince) {
            return stateProvince(Output.of(stateProvince));
        }

        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        public ContactState build() {
            return $;
        }
    }

}
