// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dnsimple;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DsRecordArgs extends com.pulumi.resources.ResourceArgs {

    public static final DsRecordArgs Empty = new DsRecordArgs();

    @Import(name="algorithm", required=true)
    private Output<String> algorithm;

    public Output<String> algorithm() {
        return this.algorithm;
    }

    @Import(name="digest")
    private @Nullable Output<String> digest;

    public Optional<Output<String>> digest() {
        return Optional.ofNullable(this.digest);
    }

    @Import(name="digestType")
    private @Nullable Output<String> digestType;

    public Optional<Output<String>> digestType() {
        return Optional.ofNullable(this.digestType);
    }

    @Import(name="domain", required=true)
    private Output<String> domain;

    public Output<String> domain() {
        return this.domain;
    }

    @Import(name="keytag")
    private @Nullable Output<String> keytag;

    public Optional<Output<String>> keytag() {
        return Optional.ofNullable(this.keytag);
    }

    @Import(name="publicKey")
    private @Nullable Output<String> publicKey;

    public Optional<Output<String>> publicKey() {
        return Optional.ofNullable(this.publicKey);
    }

    private DsRecordArgs() {}

    private DsRecordArgs(DsRecordArgs $) {
        this.algorithm = $.algorithm;
        this.digest = $.digest;
        this.digestType = $.digestType;
        this.domain = $.domain;
        this.keytag = $.keytag;
        this.publicKey = $.publicKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DsRecordArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DsRecordArgs $;

        public Builder() {
            $ = new DsRecordArgs();
        }

        public Builder(DsRecordArgs defaults) {
            $ = new DsRecordArgs(Objects.requireNonNull(defaults));
        }

        public Builder algorithm(Output<String> algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        public Builder algorithm(String algorithm) {
            return algorithm(Output.of(algorithm));
        }

        public Builder digest(@Nullable Output<String> digest) {
            $.digest = digest;
            return this;
        }

        public Builder digest(String digest) {
            return digest(Output.of(digest));
        }

        public Builder digestType(@Nullable Output<String> digestType) {
            $.digestType = digestType;
            return this;
        }

        public Builder digestType(String digestType) {
            return digestType(Output.of(digestType));
        }

        public Builder domain(Output<String> domain) {
            $.domain = domain;
            return this;
        }

        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        public Builder keytag(@Nullable Output<String> keytag) {
            $.keytag = keytag;
            return this;
        }

        public Builder keytag(String keytag) {
            return keytag(Output.of(keytag));
        }

        public Builder publicKey(@Nullable Output<String> publicKey) {
            $.publicKey = publicKey;
            return this;
        }

        public Builder publicKey(String publicKey) {
            return publicKey(Output.of(publicKey));
        }

        public DsRecordArgs build() {
            if ($.algorithm == null) {
                throw new MissingRequiredPropertyException("DsRecordArgs", "algorithm");
            }
            if ($.domain == null) {
                throw new MissingRequiredPropertyException("DsRecordArgs", "domain");
            }
            return $;
        }
    }

}
