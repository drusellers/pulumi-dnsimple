// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dnsimple;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dnsimple.inputs.RegisteredDomainTimeoutsArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegisteredDomainArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegisteredDomainArgs Empty = new RegisteredDomainArgs();

    @Import(name="autoRenewEnabled")
    private @Nullable Output<Boolean> autoRenewEnabled;

    public Optional<Output<Boolean>> autoRenewEnabled() {
        return Optional.ofNullable(this.autoRenewEnabled);
    }

    @Import(name="contactId", required=true)
    private Output<Integer> contactId;

    public Output<Integer> contactId() {
        return this.contactId;
    }

    @Import(name="dnssecEnabled")
    private @Nullable Output<Boolean> dnssecEnabled;

    public Optional<Output<Boolean>> dnssecEnabled() {
        return Optional.ofNullable(this.dnssecEnabled);
    }

    @Import(name="extendedAttributes")
    private @Nullable Output<Map<String,String>> extendedAttributes;

    public Optional<Output<Map<String,String>>> extendedAttributes() {
        return Optional.ofNullable(this.extendedAttributes);
    }

    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    @Import(name="premiumPrice")
    private @Nullable Output<String> premiumPrice;

    public Optional<Output<String>> premiumPrice() {
        return Optional.ofNullable(this.premiumPrice);
    }

    /**
     * Timeouts for operations, given as a parsable string as in `10m` or `30s`.
     * 
     */
    @Import(name="timeouts")
    private @Nullable Output<RegisteredDomainTimeoutsArgs> timeouts;

    /**
     * @return Timeouts for operations, given as a parsable string as in `10m` or `30s`.
     * 
     */
    public Optional<Output<RegisteredDomainTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    @Import(name="transferLockEnabled")
    private @Nullable Output<Boolean> transferLockEnabled;

    public Optional<Output<Boolean>> transferLockEnabled() {
        return Optional.ofNullable(this.transferLockEnabled);
    }

    @Import(name="whoisPrivacyEnabled")
    private @Nullable Output<Boolean> whoisPrivacyEnabled;

    public Optional<Output<Boolean>> whoisPrivacyEnabled() {
        return Optional.ofNullable(this.whoisPrivacyEnabled);
    }

    private RegisteredDomainArgs() {}

    private RegisteredDomainArgs(RegisteredDomainArgs $) {
        this.autoRenewEnabled = $.autoRenewEnabled;
        this.contactId = $.contactId;
        this.dnssecEnabled = $.dnssecEnabled;
        this.extendedAttributes = $.extendedAttributes;
        this.name = $.name;
        this.premiumPrice = $.premiumPrice;
        this.timeouts = $.timeouts;
        this.transferLockEnabled = $.transferLockEnabled;
        this.whoisPrivacyEnabled = $.whoisPrivacyEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegisteredDomainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegisteredDomainArgs $;

        public Builder() {
            $ = new RegisteredDomainArgs();
        }

        public Builder(RegisteredDomainArgs defaults) {
            $ = new RegisteredDomainArgs(Objects.requireNonNull(defaults));
        }

        public Builder autoRenewEnabled(@Nullable Output<Boolean> autoRenewEnabled) {
            $.autoRenewEnabled = autoRenewEnabled;
            return this;
        }

        public Builder autoRenewEnabled(Boolean autoRenewEnabled) {
            return autoRenewEnabled(Output.of(autoRenewEnabled));
        }

        public Builder contactId(Output<Integer> contactId) {
            $.contactId = contactId;
            return this;
        }

        public Builder contactId(Integer contactId) {
            return contactId(Output.of(contactId));
        }

        public Builder dnssecEnabled(@Nullable Output<Boolean> dnssecEnabled) {
            $.dnssecEnabled = dnssecEnabled;
            return this;
        }

        public Builder dnssecEnabled(Boolean dnssecEnabled) {
            return dnssecEnabled(Output.of(dnssecEnabled));
        }

        public Builder extendedAttributes(@Nullable Output<Map<String,String>> extendedAttributes) {
            $.extendedAttributes = extendedAttributes;
            return this;
        }

        public Builder extendedAttributes(Map<String,String> extendedAttributes) {
            return extendedAttributes(Output.of(extendedAttributes));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder premiumPrice(@Nullable Output<String> premiumPrice) {
            $.premiumPrice = premiumPrice;
            return this;
        }

        public Builder premiumPrice(String premiumPrice) {
            return premiumPrice(Output.of(premiumPrice));
        }

        /**
         * @param timeouts Timeouts for operations, given as a parsable string as in `10m` or `30s`.
         * 
         * @return builder
         * 
         */
        public Builder timeouts(@Nullable Output<RegisteredDomainTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        /**
         * @param timeouts Timeouts for operations, given as a parsable string as in `10m` or `30s`.
         * 
         * @return builder
         * 
         */
        public Builder timeouts(RegisteredDomainTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public Builder transferLockEnabled(@Nullable Output<Boolean> transferLockEnabled) {
            $.transferLockEnabled = transferLockEnabled;
            return this;
        }

        public Builder transferLockEnabled(Boolean transferLockEnabled) {
            return transferLockEnabled(Output.of(transferLockEnabled));
        }

        public Builder whoisPrivacyEnabled(@Nullable Output<Boolean> whoisPrivacyEnabled) {
            $.whoisPrivacyEnabled = whoisPrivacyEnabled;
            return this;
        }

        public Builder whoisPrivacyEnabled(Boolean whoisPrivacyEnabled) {
            return whoisPrivacyEnabled(Output.of(whoisPrivacyEnabled));
        }

        public RegisteredDomainArgs build() {
            if ($.contactId == null) {
                throw new MissingRequiredPropertyException("RegisteredDomainArgs", "contactId");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("RegisteredDomainArgs", "name");
            }
            return $;
        }
    }

}
