// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dnsimple;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContactArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContactArgs Empty = new ContactArgs();

    @Import(name="address1", required=true)
    private Output<String> address1;

    public Output<String> address1() {
        return this.address1;
    }

    @Import(name="address2")
    private @Nullable Output<String> address2;

    public Optional<Output<String>> address2() {
        return Optional.ofNullable(this.address2);
    }

    @Import(name="city", required=true)
    private Output<String> city;

    public Output<String> city() {
        return this.city;
    }

    @Import(name="country", required=true)
    private Output<String> country;

    public Output<String> country() {
        return this.country;
    }

    @Import(name="email", required=true)
    private Output<String> email;

    public Output<String> email() {
        return this.email;
    }

    @Import(name="fax")
    private @Nullable Output<String> fax;

    public Optional<Output<String>> fax() {
        return Optional.ofNullable(this.fax);
    }

    @Import(name="firstName", required=true)
    private Output<String> firstName;

    public Output<String> firstName() {
        return this.firstName;
    }

    @Import(name="jobTitle")
    private @Nullable Output<String> jobTitle;

    public Optional<Output<String>> jobTitle() {
        return Optional.ofNullable(this.jobTitle);
    }

    @Import(name="label")
    private @Nullable Output<String> label;

    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    @Import(name="lastName", required=true)
    private Output<String> lastName;

    public Output<String> lastName() {
        return this.lastName;
    }

    @Import(name="organizationName")
    private @Nullable Output<String> organizationName;

    public Optional<Output<String>> organizationName() {
        return Optional.ofNullable(this.organizationName);
    }

    @Import(name="phone", required=true)
    private Output<String> phone;

    public Output<String> phone() {
        return this.phone;
    }

    @Import(name="postalCode", required=true)
    private Output<String> postalCode;

    public Output<String> postalCode() {
        return this.postalCode;
    }

    @Import(name="stateProvince", required=true)
    private Output<String> stateProvince;

    public Output<String> stateProvince() {
        return this.stateProvince;
    }

    private ContactArgs() {}

    private ContactArgs(ContactArgs $) {
        this.address1 = $.address1;
        this.address2 = $.address2;
        this.city = $.city;
        this.country = $.country;
        this.email = $.email;
        this.fax = $.fax;
        this.firstName = $.firstName;
        this.jobTitle = $.jobTitle;
        this.label = $.label;
        this.lastName = $.lastName;
        this.organizationName = $.organizationName;
        this.phone = $.phone;
        this.postalCode = $.postalCode;
        this.stateProvince = $.stateProvince;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContactArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContactArgs $;

        public Builder() {
            $ = new ContactArgs();
        }

        public Builder(ContactArgs defaults) {
            $ = new ContactArgs(Objects.requireNonNull(defaults));
        }

        public Builder address1(Output<String> address1) {
            $.address1 = address1;
            return this;
        }

        public Builder address1(String address1) {
            return address1(Output.of(address1));
        }

        public Builder address2(@Nullable Output<String> address2) {
            $.address2 = address2;
            return this;
        }

        public Builder address2(String address2) {
            return address2(Output.of(address2));
        }

        public Builder city(Output<String> city) {
            $.city = city;
            return this;
        }

        public Builder city(String city) {
            return city(Output.of(city));
        }

        public Builder country(Output<String> country) {
            $.country = country;
            return this;
        }

        public Builder country(String country) {
            return country(Output.of(country));
        }

        public Builder email(Output<String> email) {
            $.email = email;
            return this;
        }

        public Builder email(String email) {
            return email(Output.of(email));
        }

        public Builder fax(@Nullable Output<String> fax) {
            $.fax = fax;
            return this;
        }

        public Builder fax(String fax) {
            return fax(Output.of(fax));
        }

        public Builder firstName(Output<String> firstName) {
            $.firstName = firstName;
            return this;
        }

        public Builder firstName(String firstName) {
            return firstName(Output.of(firstName));
        }

        public Builder jobTitle(@Nullable Output<String> jobTitle) {
            $.jobTitle = jobTitle;
            return this;
        }

        public Builder jobTitle(String jobTitle) {
            return jobTitle(Output.of(jobTitle));
        }

        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        public Builder label(String label) {
            return label(Output.of(label));
        }

        public Builder lastName(Output<String> lastName) {
            $.lastName = lastName;
            return this;
        }

        public Builder lastName(String lastName) {
            return lastName(Output.of(lastName));
        }

        public Builder organizationName(@Nullable Output<String> organizationName) {
            $.organizationName = organizationName;
            return this;
        }

        public Builder organizationName(String organizationName) {
            return organizationName(Output.of(organizationName));
        }

        public Builder phone(Output<String> phone) {
            $.phone = phone;
            return this;
        }

        public Builder phone(String phone) {
            return phone(Output.of(phone));
        }

        public Builder postalCode(Output<String> postalCode) {
            $.postalCode = postalCode;
            return this;
        }

        public Builder postalCode(String postalCode) {
            return postalCode(Output.of(postalCode));
        }

        public Builder stateProvince(Output<String> stateProvince) {
            $.stateProvince = stateProvince;
            return this;
        }

        public Builder stateProvince(String stateProvince) {
            return stateProvince(Output.of(stateProvince));
        }

        public ContactArgs build() {
            if ($.address1 == null) {
                throw new MissingRequiredPropertyException("ContactArgs", "address1");
            }
            if ($.city == null) {
                throw new MissingRequiredPropertyException("ContactArgs", "city");
            }
            if ($.country == null) {
                throw new MissingRequiredPropertyException("ContactArgs", "country");
            }
            if ($.email == null) {
                throw new MissingRequiredPropertyException("ContactArgs", "email");
            }
            if ($.firstName == null) {
                throw new MissingRequiredPropertyException("ContactArgs", "firstName");
            }
            if ($.lastName == null) {
                throw new MissingRequiredPropertyException("ContactArgs", "lastName");
            }
            if ($.phone == null) {
                throw new MissingRequiredPropertyException("ContactArgs", "phone");
            }
            if ($.postalCode == null) {
                throw new MissingRequiredPropertyException("ContactArgs", "postalCode");
            }
            if ($.stateProvince == null) {
                throw new MissingRequiredPropertyException("ContactArgs", "stateProvince");
            }
            return $;
        }
    }

}
