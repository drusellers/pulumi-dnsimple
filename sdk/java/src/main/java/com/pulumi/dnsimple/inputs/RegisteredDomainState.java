// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.dnsimple.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.dnsimple.inputs.RegisteredDomainDomainRegistrationArgs;
import com.pulumi.dnsimple.inputs.RegisteredDomainRegistrantChangeArgs;
import com.pulumi.dnsimple.inputs.RegisteredDomainTimeoutsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegisteredDomainState extends com.pulumi.resources.ResourceArgs {

    public static final RegisteredDomainState Empty = new RegisteredDomainState();

    @Import(name="accountId")
    private @Nullable Output<Integer> accountId;

    public Optional<Output<Integer>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    @Import(name="autoRenewEnabled")
    private @Nullable Output<Boolean> autoRenewEnabled;

    public Optional<Output<Boolean>> autoRenewEnabled() {
        return Optional.ofNullable(this.autoRenewEnabled);
    }

    @Import(name="contactId")
    private @Nullable Output<Integer> contactId;

    public Optional<Output<Integer>> contactId() {
        return Optional.ofNullable(this.contactId);
    }

    @Import(name="dnssecEnabled")
    private @Nullable Output<Boolean> dnssecEnabled;

    public Optional<Output<Boolean>> dnssecEnabled() {
        return Optional.ofNullable(this.dnssecEnabled);
    }

    /**
     * The domain registration details.
     * 
     */
    @Import(name="domainRegistration")
    private @Nullable Output<RegisteredDomainDomainRegistrationArgs> domainRegistration;

    /**
     * @return The domain registration details.
     * 
     */
    public Optional<Output<RegisteredDomainDomainRegistrationArgs>> domainRegistration() {
        return Optional.ofNullable(this.domainRegistration);
    }

    @Import(name="expiresAt")
    private @Nullable Output<String> expiresAt;

    public Optional<Output<String>> expiresAt() {
        return Optional.ofNullable(this.expiresAt);
    }

    @Import(name="extendedAttributes")
    private @Nullable Output<Map<String,String>> extendedAttributes;

    public Optional<Output<Map<String,String>>> extendedAttributes() {
        return Optional.ofNullable(this.extendedAttributes);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="premiumPrice")
    private @Nullable Output<String> premiumPrice;

    public Optional<Output<String>> premiumPrice() {
        return Optional.ofNullable(this.premiumPrice);
    }

    /**
     * The registrant change details.
     * 
     */
    @Import(name="registrantChange")
    private @Nullable Output<RegisteredDomainRegistrantChangeArgs> registrantChange;

    /**
     * @return The registrant change details.
     * 
     */
    public Optional<Output<RegisteredDomainRegistrantChangeArgs>> registrantChange() {
        return Optional.ofNullable(this.registrantChange);
    }

    @Import(name="state")
    private @Nullable Output<String> state;

    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Timeouts for operations, given as a parsable string as in `10m` or `30s`.
     * 
     */
    @Import(name="timeouts")
    private @Nullable Output<RegisteredDomainTimeoutsArgs> timeouts;

    /**
     * @return Timeouts for operations, given as a parsable string as in `10m` or `30s`.
     * 
     */
    public Optional<Output<RegisteredDomainTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    @Import(name="transferLockEnabled")
    private @Nullable Output<Boolean> transferLockEnabled;

    public Optional<Output<Boolean>> transferLockEnabled() {
        return Optional.ofNullable(this.transferLockEnabled);
    }

    @Import(name="unicodeName")
    private @Nullable Output<String> unicodeName;

    public Optional<Output<String>> unicodeName() {
        return Optional.ofNullable(this.unicodeName);
    }

    @Import(name="whoisPrivacyEnabled")
    private @Nullable Output<Boolean> whoisPrivacyEnabled;

    public Optional<Output<Boolean>> whoisPrivacyEnabled() {
        return Optional.ofNullable(this.whoisPrivacyEnabled);
    }

    private RegisteredDomainState() {}

    private RegisteredDomainState(RegisteredDomainState $) {
        this.accountId = $.accountId;
        this.autoRenewEnabled = $.autoRenewEnabled;
        this.contactId = $.contactId;
        this.dnssecEnabled = $.dnssecEnabled;
        this.domainRegistration = $.domainRegistration;
        this.expiresAt = $.expiresAt;
        this.extendedAttributes = $.extendedAttributes;
        this.name = $.name;
        this.premiumPrice = $.premiumPrice;
        this.registrantChange = $.registrantChange;
        this.state = $.state;
        this.timeouts = $.timeouts;
        this.transferLockEnabled = $.transferLockEnabled;
        this.unicodeName = $.unicodeName;
        this.whoisPrivacyEnabled = $.whoisPrivacyEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegisteredDomainState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegisteredDomainState $;

        public Builder() {
            $ = new RegisteredDomainState();
        }

        public Builder(RegisteredDomainState defaults) {
            $ = new RegisteredDomainState(Objects.requireNonNull(defaults));
        }

        public Builder accountId(@Nullable Output<Integer> accountId) {
            $.accountId = accountId;
            return this;
        }

        public Builder accountId(Integer accountId) {
            return accountId(Output.of(accountId));
        }

        public Builder autoRenewEnabled(@Nullable Output<Boolean> autoRenewEnabled) {
            $.autoRenewEnabled = autoRenewEnabled;
            return this;
        }

        public Builder autoRenewEnabled(Boolean autoRenewEnabled) {
            return autoRenewEnabled(Output.of(autoRenewEnabled));
        }

        public Builder contactId(@Nullable Output<Integer> contactId) {
            $.contactId = contactId;
            return this;
        }

        public Builder contactId(Integer contactId) {
            return contactId(Output.of(contactId));
        }

        public Builder dnssecEnabled(@Nullable Output<Boolean> dnssecEnabled) {
            $.dnssecEnabled = dnssecEnabled;
            return this;
        }

        public Builder dnssecEnabled(Boolean dnssecEnabled) {
            return dnssecEnabled(Output.of(dnssecEnabled));
        }

        /**
         * @param domainRegistration The domain registration details.
         * 
         * @return builder
         * 
         */
        public Builder domainRegistration(@Nullable Output<RegisteredDomainDomainRegistrationArgs> domainRegistration) {
            $.domainRegistration = domainRegistration;
            return this;
        }

        /**
         * @param domainRegistration The domain registration details.
         * 
         * @return builder
         * 
         */
        public Builder domainRegistration(RegisteredDomainDomainRegistrationArgs domainRegistration) {
            return domainRegistration(Output.of(domainRegistration));
        }

        public Builder expiresAt(@Nullable Output<String> expiresAt) {
            $.expiresAt = expiresAt;
            return this;
        }

        public Builder expiresAt(String expiresAt) {
            return expiresAt(Output.of(expiresAt));
        }

        public Builder extendedAttributes(@Nullable Output<Map<String,String>> extendedAttributes) {
            $.extendedAttributes = extendedAttributes;
            return this;
        }

        public Builder extendedAttributes(Map<String,String> extendedAttributes) {
            return extendedAttributes(Output.of(extendedAttributes));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder premiumPrice(@Nullable Output<String> premiumPrice) {
            $.premiumPrice = premiumPrice;
            return this;
        }

        public Builder premiumPrice(String premiumPrice) {
            return premiumPrice(Output.of(premiumPrice));
        }

        /**
         * @param registrantChange The registrant change details.
         * 
         * @return builder
         * 
         */
        public Builder registrantChange(@Nullable Output<RegisteredDomainRegistrantChangeArgs> registrantChange) {
            $.registrantChange = registrantChange;
            return this;
        }

        /**
         * @param registrantChange The registrant change details.
         * 
         * @return builder
         * 
         */
        public Builder registrantChange(RegisteredDomainRegistrantChangeArgs registrantChange) {
            return registrantChange(Output.of(registrantChange));
        }

        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param timeouts Timeouts for operations, given as a parsable string as in `10m` or `30s`.
         * 
         * @return builder
         * 
         */
        public Builder timeouts(@Nullable Output<RegisteredDomainTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        /**
         * @param timeouts Timeouts for operations, given as a parsable string as in `10m` or `30s`.
         * 
         * @return builder
         * 
         */
        public Builder timeouts(RegisteredDomainTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public Builder transferLockEnabled(@Nullable Output<Boolean> transferLockEnabled) {
            $.transferLockEnabled = transferLockEnabled;
            return this;
        }

        public Builder transferLockEnabled(Boolean transferLockEnabled) {
            return transferLockEnabled(Output.of(transferLockEnabled));
        }

        public Builder unicodeName(@Nullable Output<String> unicodeName) {
            $.unicodeName = unicodeName;
            return this;
        }

        public Builder unicodeName(String unicodeName) {
            return unicodeName(Output.of(unicodeName));
        }

        public Builder whoisPrivacyEnabled(@Nullable Output<Boolean> whoisPrivacyEnabled) {
            $.whoisPrivacyEnabled = whoisPrivacyEnabled;
            return this;
        }

        public Builder whoisPrivacyEnabled(Boolean whoisPrivacyEnabled) {
            return whoisPrivacyEnabled(Output.of(whoisPrivacyEnabled));
        }

        public RegisteredDomainState build() {
            return $;
        }
    }

}
