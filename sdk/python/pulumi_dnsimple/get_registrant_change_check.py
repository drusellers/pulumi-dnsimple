# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetRegistrantChangeCheckResult',
    'AwaitableGetRegistrantChangeCheckResult',
    'get_registrant_change_check',
    'get_registrant_change_check_output',
]

@pulumi.output_type
class GetRegistrantChangeCheckResult:
    """
    A collection of values returned by getRegistrantChangeCheck.
    """
    def __init__(__self__, contact_id=None, domain_id=None, extended_attributes=None, id=None, registry_owner_change=None):
        if contact_id and not isinstance(contact_id, str):
            raise TypeError("Expected argument 'contact_id' to be a str")
        pulumi.set(__self__, "contact_id", contact_id)
        if domain_id and not isinstance(domain_id, str):
            raise TypeError("Expected argument 'domain_id' to be a str")
        pulumi.set(__self__, "domain_id", domain_id)
        if extended_attributes and not isinstance(extended_attributes, list):
            raise TypeError("Expected argument 'extended_attributes' to be a list")
        pulumi.set(__self__, "extended_attributes", extended_attributes)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if registry_owner_change and not isinstance(registry_owner_change, bool):
            raise TypeError("Expected argument 'registry_owner_change' to be a bool")
        pulumi.set(__self__, "registry_owner_change", registry_owner_change)

    @property
    @pulumi.getter(name="contactId")
    def contact_id(self) -> str:
        return pulumi.get(self, "contact_id")

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> str:
        return pulumi.get(self, "domain_id")

    @property
    @pulumi.getter(name="extendedAttributes")
    def extended_attributes(self) -> Sequence['outputs.GetRegistrantChangeCheckExtendedAttributeResult']:
        return pulumi.get(self, "extended_attributes")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="registryOwnerChange")
    def registry_owner_change(self) -> bool:
        return pulumi.get(self, "registry_owner_change")


class AwaitableGetRegistrantChangeCheckResult(GetRegistrantChangeCheckResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRegistrantChangeCheckResult(
            contact_id=self.contact_id,
            domain_id=self.domain_id,
            extended_attributes=self.extended_attributes,
            id=self.id,
            registry_owner_change=self.registry_owner_change)


def get_registrant_change_check(contact_id: Optional[str] = None,
                                domain_id: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRegistrantChangeCheckResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['contactId'] = contact_id
    __args__['domainId'] = domain_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('dnsimple:index/getRegistrantChangeCheck:getRegistrantChangeCheck', __args__, opts=opts, typ=GetRegistrantChangeCheckResult).value

    return AwaitableGetRegistrantChangeCheckResult(
        contact_id=pulumi.get(__ret__, 'contact_id'),
        domain_id=pulumi.get(__ret__, 'domain_id'),
        extended_attributes=pulumi.get(__ret__, 'extended_attributes'),
        id=pulumi.get(__ret__, 'id'),
        registry_owner_change=pulumi.get(__ret__, 'registry_owner_change'))


@_utilities.lift_output_func(get_registrant_change_check)
def get_registrant_change_check_output(contact_id: Optional[pulumi.Input[str]] = None,
                                       domain_id: Optional[pulumi.Input[str]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRegistrantChangeCheckResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
