# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RegisteredDomainArgs', 'RegisteredDomain']

@pulumi.input_type
class RegisteredDomainArgs:
    def __init__(__self__, *,
                 contact_id: pulumi.Input[int],
                 name: pulumi.Input[str],
                 auto_renew_enabled: Optional[pulumi.Input[bool]] = None,
                 dnssec_enabled: Optional[pulumi.Input[bool]] = None,
                 extended_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 premium_price: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input['RegisteredDomainTimeoutsArgs']] = None,
                 transfer_lock_enabled: Optional[pulumi.Input[bool]] = None,
                 whois_privacy_enabled: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a RegisteredDomain resource.
        :param pulumi.Input['RegisteredDomainTimeoutsArgs'] timeouts: Timeouts for operations, given as a parsable string as in `10m` or `30s`.
        """
        pulumi.set(__self__, "contact_id", contact_id)
        pulumi.set(__self__, "name", name)
        if auto_renew_enabled is not None:
            pulumi.set(__self__, "auto_renew_enabled", auto_renew_enabled)
        if dnssec_enabled is not None:
            pulumi.set(__self__, "dnssec_enabled", dnssec_enabled)
        if extended_attributes is not None:
            pulumi.set(__self__, "extended_attributes", extended_attributes)
        if premium_price is not None:
            pulumi.set(__self__, "premium_price", premium_price)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if transfer_lock_enabled is not None:
            pulumi.set(__self__, "transfer_lock_enabled", transfer_lock_enabled)
        if whois_privacy_enabled is not None:
            pulumi.set(__self__, "whois_privacy_enabled", whois_privacy_enabled)

    @property
    @pulumi.getter(name="contactId")
    def contact_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "contact_id")

    @contact_id.setter
    def contact_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "contact_id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="autoRenewEnabled")
    def auto_renew_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_renew_enabled")

    @auto_renew_enabled.setter
    def auto_renew_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_renew_enabled", value)

    @property
    @pulumi.getter(name="dnssecEnabled")
    def dnssec_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "dnssec_enabled")

    @dnssec_enabled.setter
    def dnssec_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dnssec_enabled", value)

    @property
    @pulumi.getter(name="extendedAttributes")
    def extended_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "extended_attributes")

    @extended_attributes.setter
    def extended_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "extended_attributes", value)

    @property
    @pulumi.getter(name="premiumPrice")
    def premium_price(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "premium_price")

    @premium_price.setter
    def premium_price(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "premium_price", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['RegisteredDomainTimeoutsArgs']]:
        """
        Timeouts for operations, given as a parsable string as in `10m` or `30s`.
        """
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['RegisteredDomainTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @property
    @pulumi.getter(name="transferLockEnabled")
    def transfer_lock_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "transfer_lock_enabled")

    @transfer_lock_enabled.setter
    def transfer_lock_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "transfer_lock_enabled", value)

    @property
    @pulumi.getter(name="whoisPrivacyEnabled")
    def whois_privacy_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "whois_privacy_enabled")

    @whois_privacy_enabled.setter
    def whois_privacy_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "whois_privacy_enabled", value)


@pulumi.input_type
class _RegisteredDomainState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[int]] = None,
                 auto_renew_enabled: Optional[pulumi.Input[bool]] = None,
                 contact_id: Optional[pulumi.Input[int]] = None,
                 dnssec_enabled: Optional[pulumi.Input[bool]] = None,
                 domain_registration: Optional[pulumi.Input['RegisteredDomainDomainRegistrationArgs']] = None,
                 expires_at: Optional[pulumi.Input[str]] = None,
                 extended_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 premium_price: Optional[pulumi.Input[str]] = None,
                 registrant_change: Optional[pulumi.Input['RegisteredDomainRegistrantChangeArgs']] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input['RegisteredDomainTimeoutsArgs']] = None,
                 transfer_lock_enabled: Optional[pulumi.Input[bool]] = None,
                 unicode_name: Optional[pulumi.Input[str]] = None,
                 whois_privacy_enabled: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering RegisteredDomain resources.
        :param pulumi.Input['RegisteredDomainDomainRegistrationArgs'] domain_registration: The domain registration details.
        :param pulumi.Input['RegisteredDomainRegistrantChangeArgs'] registrant_change: The registrant change details.
        :param pulumi.Input['RegisteredDomainTimeoutsArgs'] timeouts: Timeouts for operations, given as a parsable string as in `10m` or `30s`.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if auto_renew_enabled is not None:
            pulumi.set(__self__, "auto_renew_enabled", auto_renew_enabled)
        if contact_id is not None:
            pulumi.set(__self__, "contact_id", contact_id)
        if dnssec_enabled is not None:
            pulumi.set(__self__, "dnssec_enabled", dnssec_enabled)
        if domain_registration is not None:
            pulumi.set(__self__, "domain_registration", domain_registration)
        if expires_at is not None:
            pulumi.set(__self__, "expires_at", expires_at)
        if extended_attributes is not None:
            pulumi.set(__self__, "extended_attributes", extended_attributes)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if premium_price is not None:
            pulumi.set(__self__, "premium_price", premium_price)
        if registrant_change is not None:
            pulumi.set(__self__, "registrant_change", registrant_change)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if transfer_lock_enabled is not None:
            pulumi.set(__self__, "transfer_lock_enabled", transfer_lock_enabled)
        if unicode_name is not None:
            pulumi.set(__self__, "unicode_name", unicode_name)
        if whois_privacy_enabled is not None:
            pulumi.set(__self__, "whois_privacy_enabled", whois_privacy_enabled)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="autoRenewEnabled")
    def auto_renew_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_renew_enabled")

    @auto_renew_enabled.setter
    def auto_renew_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_renew_enabled", value)

    @property
    @pulumi.getter(name="contactId")
    def contact_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "contact_id")

    @contact_id.setter
    def contact_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "contact_id", value)

    @property
    @pulumi.getter(name="dnssecEnabled")
    def dnssec_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "dnssec_enabled")

    @dnssec_enabled.setter
    def dnssec_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dnssec_enabled", value)

    @property
    @pulumi.getter(name="domainRegistration")
    def domain_registration(self) -> Optional[pulumi.Input['RegisteredDomainDomainRegistrationArgs']]:
        """
        The domain registration details.
        """
        return pulumi.get(self, "domain_registration")

    @domain_registration.setter
    def domain_registration(self, value: Optional[pulumi.Input['RegisteredDomainDomainRegistrationArgs']]):
        pulumi.set(self, "domain_registration", value)

    @property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expires_at")

    @expires_at.setter
    def expires_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expires_at", value)

    @property
    @pulumi.getter(name="extendedAttributes")
    def extended_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "extended_attributes")

    @extended_attributes.setter
    def extended_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "extended_attributes", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="premiumPrice")
    def premium_price(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "premium_price")

    @premium_price.setter
    def premium_price(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "premium_price", value)

    @property
    @pulumi.getter(name="registrantChange")
    def registrant_change(self) -> Optional[pulumi.Input['RegisteredDomainRegistrantChangeArgs']]:
        """
        The registrant change details.
        """
        return pulumi.get(self, "registrant_change")

    @registrant_change.setter
    def registrant_change(self, value: Optional[pulumi.Input['RegisteredDomainRegistrantChangeArgs']]):
        pulumi.set(self, "registrant_change", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['RegisteredDomainTimeoutsArgs']]:
        """
        Timeouts for operations, given as a parsable string as in `10m` or `30s`.
        """
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['RegisteredDomainTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @property
    @pulumi.getter(name="transferLockEnabled")
    def transfer_lock_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "transfer_lock_enabled")

    @transfer_lock_enabled.setter
    def transfer_lock_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "transfer_lock_enabled", value)

    @property
    @pulumi.getter(name="unicodeName")
    def unicode_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unicode_name")

    @unicode_name.setter
    def unicode_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unicode_name", value)

    @property
    @pulumi.getter(name="whoisPrivacyEnabled")
    def whois_privacy_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "whois_privacy_enabled")

    @whois_privacy_enabled.setter
    def whois_privacy_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "whois_privacy_enabled", value)


class RegisteredDomain(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew_enabled: Optional[pulumi.Input[bool]] = None,
                 contact_id: Optional[pulumi.Input[int]] = None,
                 dnssec_enabled: Optional[pulumi.Input[bool]] = None,
                 extended_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 premium_price: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input[pulumi.InputType['RegisteredDomainTimeoutsArgs']]] = None,
                 transfer_lock_enabled: Optional[pulumi.Input[bool]] = None,
                 whois_privacy_enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a RegisteredDomain resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['RegisteredDomainTimeoutsArgs']] timeouts: Timeouts for operations, given as a parsable string as in `10m` or `30s`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RegisteredDomainArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a RegisteredDomain resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RegisteredDomainArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RegisteredDomainArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew_enabled: Optional[pulumi.Input[bool]] = None,
                 contact_id: Optional[pulumi.Input[int]] = None,
                 dnssec_enabled: Optional[pulumi.Input[bool]] = None,
                 extended_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 premium_price: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input[pulumi.InputType['RegisteredDomainTimeoutsArgs']]] = None,
                 transfer_lock_enabled: Optional[pulumi.Input[bool]] = None,
                 whois_privacy_enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RegisteredDomainArgs.__new__(RegisteredDomainArgs)

            __props__.__dict__["auto_renew_enabled"] = auto_renew_enabled
            if contact_id is None and not opts.urn:
                raise TypeError("Missing required property 'contact_id'")
            __props__.__dict__["contact_id"] = contact_id
            __props__.__dict__["dnssec_enabled"] = dnssec_enabled
            __props__.__dict__["extended_attributes"] = extended_attributes
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            __props__.__dict__["premium_price"] = premium_price
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["transfer_lock_enabled"] = transfer_lock_enabled
            __props__.__dict__["whois_privacy_enabled"] = whois_privacy_enabled
            __props__.__dict__["account_id"] = None
            __props__.__dict__["domain_registration"] = None
            __props__.__dict__["expires_at"] = None
            __props__.__dict__["registrant_change"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["unicode_name"] = None
        super(RegisteredDomain, __self__).__init__(
            'dnsimple:index/registeredDomain:RegisteredDomain',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[int]] = None,
            auto_renew_enabled: Optional[pulumi.Input[bool]] = None,
            contact_id: Optional[pulumi.Input[int]] = None,
            dnssec_enabled: Optional[pulumi.Input[bool]] = None,
            domain_registration: Optional[pulumi.Input[pulumi.InputType['RegisteredDomainDomainRegistrationArgs']]] = None,
            expires_at: Optional[pulumi.Input[str]] = None,
            extended_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            premium_price: Optional[pulumi.Input[str]] = None,
            registrant_change: Optional[pulumi.Input[pulumi.InputType['RegisteredDomainRegistrantChangeArgs']]] = None,
            state: Optional[pulumi.Input[str]] = None,
            timeouts: Optional[pulumi.Input[pulumi.InputType['RegisteredDomainTimeoutsArgs']]] = None,
            transfer_lock_enabled: Optional[pulumi.Input[bool]] = None,
            unicode_name: Optional[pulumi.Input[str]] = None,
            whois_privacy_enabled: Optional[pulumi.Input[bool]] = None) -> 'RegisteredDomain':
        """
        Get an existing RegisteredDomain resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['RegisteredDomainDomainRegistrationArgs']] domain_registration: The domain registration details.
        :param pulumi.Input[pulumi.InputType['RegisteredDomainRegistrantChangeArgs']] registrant_change: The registrant change details.
        :param pulumi.Input[pulumi.InputType['RegisteredDomainTimeoutsArgs']] timeouts: Timeouts for operations, given as a parsable string as in `10m` or `30s`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RegisteredDomainState.__new__(_RegisteredDomainState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["auto_renew_enabled"] = auto_renew_enabled
        __props__.__dict__["contact_id"] = contact_id
        __props__.__dict__["dnssec_enabled"] = dnssec_enabled
        __props__.__dict__["domain_registration"] = domain_registration
        __props__.__dict__["expires_at"] = expires_at
        __props__.__dict__["extended_attributes"] = extended_attributes
        __props__.__dict__["name"] = name
        __props__.__dict__["premium_price"] = premium_price
        __props__.__dict__["registrant_change"] = registrant_change
        __props__.__dict__["state"] = state
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["transfer_lock_enabled"] = transfer_lock_enabled
        __props__.__dict__["unicode_name"] = unicode_name
        __props__.__dict__["whois_privacy_enabled"] = whois_privacy_enabled
        return RegisteredDomain(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="autoRenewEnabled")
    def auto_renew_enabled(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "auto_renew_enabled")

    @property
    @pulumi.getter(name="contactId")
    def contact_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "contact_id")

    @property
    @pulumi.getter(name="dnssecEnabled")
    def dnssec_enabled(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "dnssec_enabled")

    @property
    @pulumi.getter(name="domainRegistration")
    def domain_registration(self) -> pulumi.Output['outputs.RegisteredDomainDomainRegistration']:
        """
        The domain registration details.
        """
        return pulumi.get(self, "domain_registration")

    @property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> pulumi.Output[str]:
        return pulumi.get(self, "expires_at")

    @property
    @pulumi.getter(name="extendedAttributes")
    def extended_attributes(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "extended_attributes")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="premiumPrice")
    def premium_price(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "premium_price")

    @property
    @pulumi.getter(name="registrantChange")
    def registrant_change(self) -> pulumi.Output['outputs.RegisteredDomainRegistrantChange']:
        """
        The registrant change details.
        """
        return pulumi.get(self, "registrant_change")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.RegisteredDomainTimeouts']]:
        """
        Timeouts for operations, given as a parsable string as in `10m` or `30s`.
        """
        return pulumi.get(self, "timeouts")

    @property
    @pulumi.getter(name="transferLockEnabled")
    def transfer_lock_enabled(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "transfer_lock_enabled")

    @property
    @pulumi.getter(name="unicodeName")
    def unicode_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "unicode_name")

    @property
    @pulumi.getter(name="whoisPrivacyEnabled")
    def whois_privacy_enabled(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "whois_privacy_enabled")

